/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package com.jxbrowser;

import com.teamdev.jxbrowser.browser.Browser;
import com.teamdev.jxbrowser.browser.callback.StartDownloadCallback;
import com.teamdev.jxbrowser.download.Download;
import com.teamdev.jxbrowser.download.DownloadTarget;
import com.teamdev.jxbrowser.download.event.DownloadFinished;
import com.teamdev.jxbrowser.download.event.DownloadInterruptReason;
import com.teamdev.jxbrowser.download.event.DownloadInterrupted;
import com.teamdev.jxbrowser.download.event.DownloadUpdated;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.nio.file.Path;
import java.nio.file.Paths;
import javax.swing.JOptionPane;

/**
 *
 * @author title
 */
public class FileDownloadBox extends javax.swing.JFrame {

    /**
     * Creates new form FileDownloadBox
     */
    Download m_download;
    DownloadTarget m_target;
    public FileDownloadBox(Download download, DownloadTarget target) {
        m_download = download;
        m_target = target;
        
        initComponents();
        initSettings();
        
        initBox();
    }

    
    private void initBox(){

        String strFilePath = Paths.get(m_target.suggestedFileName()).toString();
        jlbl_download.setText(strFilePath);
        jprogress_download.setMaximum(100);
        jprogress_download.setStringPainted(true);
        
        m_download.on(DownloadFinished.class, event -> {
            System.out.print("Download finished");
            dispose();
        });        
        
        m_download.on(DownloadUpdated.class, event -> {
            // Print download progress in percents.
            event.progress().ifPresent(progress -> 
                jprogress_download.setValue((int) (progress.value()))
            );
            
            // The current download speed estimate in bytes/second.
            long currentSpeed = event.currentSpeed();
            // The total size of a file in bytes.
            long totalBytes = event.totalBytes();
            // The number or received (downloaded) bytes.
            long receivedBytes = event.receivedBytes();
            
            long time = 0;
            if (currentSpeed != 0)
                time = (totalBytes - receivedBytes) / currentSpeed;
            String strRemainTime = "";
            if (time >= 0 && time < 60)
                strRemainTime = String.valueOf(time) + "secs left";
            else
                strRemainTime = String.valueOf((int)time/60) + "mins left";
            
            String strState = String.valueOf(receivedBytes/(1024*1024)) + "/" + String.valueOf(totalBytes/(1024*1024)) + "MB, " + strRemainTime;
            
            String strSpeed = "";
            if (currentSpeed < 1024*1024)
                strSpeed = "current speed: " + String.valueOf(currentSpeed/(1024)) + "KB/Sec";
            else
                strSpeed = "current speed: " + String.valueOf(currentSpeed/(1024*1024)) + "MB/Sec";
            jlbl_speed.setText(strSpeed);
            jlbl_state.setText(strState);
        });
        
        m_download.on(DownloadInterrupted.class, event -> {
            // The interrupt reason such as file access denied, network failed, etc.
            DownloadInterruptReason reason = event.reason();
            JOptionPane.showMessageDialog(getParent(), reason.toString());
        });
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jprogress_download = new javax.swing.JProgressBar();
        jbtn_pause = new javax.swing.JButton();
        jbtn_cancel = new javax.swing.JButton();
        jlbl_state = new javax.swing.JLabel();
        jlbl_download = new javax.swing.JLabel();
        jlbl_speed = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jbtn_pause.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jbtn_pause.setText("pause");
        jbtn_pause.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtn_pauseActionPerformed(evt);
            }
        });

        jbtn_cancel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jbtn_cancel.setText("Cancel");
        jbtn_cancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtn_cancelActionPerformed(evt);
            }
        });

        jlbl_state.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jlbl_state.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);

        jlbl_download.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        jlbl_speed.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(51, 51, 51)
                .addComponent(jbtn_pause, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jbtn_cancel, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(82, 82, 82))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jlbl_speed, javax.swing.GroupLayout.PREFERRED_SIZE, 353, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(139, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jlbl_download, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jprogress_download, javax.swing.GroupLayout.PREFERRED_SIZE, 324, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jlbl_state, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(jlbl_download, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jprogress_download, javax.swing.GroupLayout.DEFAULT_SIZE, 28, Short.MAX_VALUE)
                    .addComponent(jlbl_state, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jlbl_speed, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jbtn_pause, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jbtn_cancel, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jbtn_cancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtn_cancelActionPerformed
        // TODO add your handling code here:
        m_download.cancel();
        dispose();
    }//GEN-LAST:event_jbtn_cancelActionPerformed

    private void jbtn_pauseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtn_pauseActionPerformed
        // TODO add your handling code here:
        if (m_download.isPaused()) {
            m_download.resume();
            jbtn_pause.setText("pause");
        }else{
            m_download.pause();
            jbtn_pause.setText("resume");
        }
    }//GEN-LAST:event_jbtn_pauseActionPerformed

    
    private void initSettings(){
        setTitle("File Download");
                
        setResizable(false);
        
    }
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jbtn_cancel;
    private javax.swing.JButton jbtn_pause;
    private javax.swing.JLabel jlbl_download;
    private javax.swing.JLabel jlbl_speed;
    private javax.swing.JLabel jlbl_state;
    private javax.swing.JProgressBar jprogress_download;
    // End of variables declaration//GEN-END:variables
}
